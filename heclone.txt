 Cloning to a specific folder

git clone <repo> <directory>

Clone the repository located at ＜repo＞ into the folder called ~＜directory＞! on the local machine.
Cloning a specific tag

git clone --branch <tag> <repo>

Clone the repository located at ＜repo＞ and only clone the ref for ＜tag＞.
Shallow clone

git clone -depth=1 <repo>

Clone the repository located at ＜repo＞ and only clone the 
history of commits specified by the option depth=1. In this example a clone of ＜repo＞ is made and only the most recent commit is included in the new cloned Repo. Shallow cloning is most useful when working with repos that have an extensive commit history. An extensive commit history may cause scaling problems such as disk space usage limits and long wait times when cloning. A Shallow clone can help alleviate these scaling issues.
Configuration options
git clone -branch

The -branch argument lets you specify a specific branch to clone instead of the branch the remote HEAD is pointing to, usually the main branch. In addition you can pass a tag instead of branch for the same effect.

 

git clone -branch new_feature git://remoterepository.git

This above example would clone only the new_feature branch from the remote Git repository. This is purely a convenience utility to save you time from downloading the HEAD ref of the repository and then having to additionally fetch the ref you need.
git clone -mirror vs. git clone -bare
git clone --bare

Similar to git init --bare, when the -bare argument is passed to git clone, a copy of the remote repository will be made with an omitted working directory. This means that a repository will be set up with the history of the project that can be pushed and pulled from, but cannot be edited directly. In addition, no remote branches for the repo will be configured with the -bare repository. Like git init --bare, this is used to create a hosted repository that developers will not edit directly.
git clone --mirror

Passing the --mirror argument implicitly passes the --bare argument as well. This means the behavior of --bare is inherited by --mirror. Resulting in a bare repo with no editable working files. In addition, --mirror will clone all the extended refs of the remote repository, and maintain remote branch tracking configuration. You can then run git remote update on the mirror and it will overwrite all refs from the origin repo. Giving you exact 'mirrored' functionality.
Other configuration options

For a comprehensive list of other git clone options visit the official Git documentation. In this document, we'll touch on some other common options.
git clone --template

git clone --template=<template_directory> <repo location>

Clones the repo at ＜repo location＞ and applies the template from ＜template directory＞ to the newly created local branch. 
